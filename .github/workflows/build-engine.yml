name: build
on:
  push:
    branches:
      - master
  release:
    types:
      - created
  workflow_dispatch:
    inputs:
      version:
        description: "バージョン情報（A.BB.C / A.BB.C-preview.D）"
        required: true
      prerelease:
        description: "プレリリースかどうか"
        type: boolean
        default: true
      code_signing:
        description: "コード署名する"
        type: boolean
        default: false
      upload_artifact:
        description: "デバッグ用に成果物をartifactにアップロードするか"
        type: boolean
        default: false
      push_dockerhub:
        description: "Docker Hubにプッシュする"
        type: boolean
        default: false

defaults:
  run:
    shell: bash

jobs:
  config: # 全 jobs で利用する定数の定義. `env` が利用できないコンテキストでも利用できる.
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.vars.outputs.version }}
      version_or_latest: ${{ steps.vars.outputs.version_or_latest }}
    steps:
      - name: <Setup> Declare variables
        id: vars
        run: |
          : # release タグ名, または workflow_dispatch でのバージョン名. リリースでない (push event) 場合は空文字列
          echo "version=${{ github.event.release.tag_name || github.event.inputs.version }}" >> "$GITHUB_OUTPUT"
          : # release タグ名, または workflow_dispatch でのバージョン名, または 'latest'
          echo "version_or_latest=${{ github.event.release.tag_name || github.event.inputs.version || 'latest' }}" >> "$GITHUB_OUTPUT"

  build-and-upload:
    needs: [config]
    environment: ${{ github.event.inputs.code_signing == 'true' && 'code_signing' || '' }} # コード署名用のenvironment
    strategy:
      matrix:
        include:
          # Windows CPU
          - os: windows-2022
            architecture: "x64"
            onnxruntime_device: cpu
            target: windows-cpu

    runs-on: ${{ matrix.os }}

    env:
      # GNUコマンド
      sed: 'sed' 
      split: 'split'
      BOUYOMI_CLI_VERSION: 0.1.0

    steps:
      - name: <Setup> Declare variables
        id: vars
        run: echo "package_name=bouyomi_engine-${{ matrix.target }}-${{ needs.config.outputs.version }}" >> "$GITHUB_OUTPUT"

      - name: <Setup> Check out the repository
        uses: actions/checkout@v4


      # zlib
      - name: <Setup> Export zlib url to calc hash
        if: matrix.zlib_url != ''
        run: echo "${{ matrix.zlib_url }}" >> download/zlib_url.txt

      - name: <Setup> Restore cached zlib
        if: matrix.zlib_url != ''
        uses: actions/cache/restore@v4
        id: zlib-cache-restore
        with:
          key: zlib-cache-v1-${{ hashFiles('download/zlib_url.txt') }}
          path: download/zlib

      - name: <Setup> Download zlib dynamic Library
        if: steps.zlib-cache-restore.outputs.cache-hit != 'true' && matrix.zlib_url != ''
        run: |
          curl -fL --retry 3 --retry-delay 5 "${{ matrix.zlib_url }}" -o download/zlib.zip
          mkdir -p download/zlib

          # extract only dlls
          unzip download/zlib.zip dll_${{ matrix.architecture }}/zlibwapi.dll -d download/zlib
          rm download/zlib.zip
          mv download/zlib/dll_${{ matrix.architecture }}/zlibwapi.dll download/zlib/zlibwapi.dll
          rm -r download/zlib/dll_${{ matrix.architecture }}

      - name: <Setup> Save zlib cache
        if: matrix.zlib_url != ''
        uses: actions/cache/save@v4
        with:
          key: ${{ steps.zlib-cache-restore.outputs.cache-primary-key }}
          path: download/zlib

      - name: <Setup> Set up MSVC
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: <Setup> Prepare Python Runtime / Python Dependencies
        uses: ./.github/actions/prepare_python
        with:
          dependency-group: build

      - name: <Setup> Prepare custom PyInstaller
        if: runner.os == 'Windows'
        run: ./tools/modify_pyinstaller.bash

      
      # Download bouyomi-cli
      - name: Download bouyomi-cli
        id: download-cli
        uses: ./.github/actions/download-cli
        with:
          version: ${{ env.BOUYOMI_CLI_VERSION }}
          dest: ${{ github.workspace }}/bouyomi-cli
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge bouyomi-cli into prepackage/
        if: startsWith(matrix.artifact_name, 'windows-') || startsWith(matrix.artifact_name, 'linux-')
        run: |
          mv bouyomi-cli/ prepackage/bouyomi-cli/

      - name: Create Windows & Mac zip (without nvidia)
        if: (startsWith(matrix.artifact_name, 'windows-') || startsWith(matrix.artifact_name, 'macos-')) && !contains(matrix.artifact_name, 'nvidia')
        run: |
          name="${{ matrix.compressed_artifact_name }}-${{ env.AIVISSPEECH_EDITOR_VERSION }}"
          7z a -tzip $name.zip prepackage/
          7z rn $name.zip prepackage/ bouyomi-engine/

      # Build
      - name: <Build> Generate licenses.json
        run: |
          OUTPUT_LICENSE_JSON_PATH=resources/engine_manifest_assets/dependency_licenses.json \
          bash tools/create_venv_and_generate_licenses.bash
          # FIXME: VOICEVOX (editor) cannot build without licenses.json
          cp resources/engine_manifest_assets/dependency_licenses.json licenses.json

      - name: <Build> Generate filemap.json
        run: uv run tools/generate_filemap.py --target_dir resources/character_info

      - name: <Build> Build VOICEVOX ENGINE run.py
        run: |
          set -eux

          jq '
            .version = "${{ needs.config.outputs.version_or_latest }}" |
            if ${{ runner.os == 'Windows' }} then .command += ".exe" else . end
          ' engine_manifest.json > engine_manifest.json.tmp

          mv -f engine_manifest.json.tmp engine_manifest.json

          # Replace version & specify dynamic libraries
          $sed -i "s/__version__ = \"latest\"/__version__ = \"${{ needs.config.outputs.version_or_latest }}\"/" voicevox_engine/__init__.py

          uv run pyinstaller --noconfirm run.spec

      - name: <Build> Code signing
        if: github.event.inputs.code_signing == 'true' && runner.os == 'Windows'
        run: bash tools/codesign.bash "dist/run/run.exe"
        env:
          ESIGNERCKA_USERNAME: ${{ secrets.ESIGNERCKA_USERNAME }}
          ESIGNERCKA_PASSWORD: ${{ secrets.ESIGNERCKA_PASSWORD }}
          ESIGNERCKA_TOTP_SECRET: ${{ secrets.ESIGNERCKA_TOTP_SECRET }}

      - name: <Build> Rename artifact directory to archive
        run: mv dist/run/ "${{ matrix.target }}/"

      # 7z archives
      - name: <Build> Create 7z archives
        run: |
          # Compress to artifact.7z.001, artifact.7z.002, ...
          7z -r -v1900m a "${{ steps.vars.outputs.package_name }}.7z" "${{ matrix.target }}/"

          # Output splitted archive list
          ls ${{ steps.vars.outputs.package_name }}.7z.* > archives_7z.txt
          mv archives_7z.txt "${{ steps.vars.outputs.package_name }}.7z.txt"

      - name: <Deploy> Upload 7z archives to artifact
        if: github.event.inputs.upload_artifact == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.vars.outputs.package_name }}-7z
          path: |
            ${{ steps.vars.outputs.package_name }}.7z.*

      - name: <Deploy> Upload 7z archives to Release assets
        if: needs.config.outputs.version != ''
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          prerelease: ${{ github.event.inputs.prerelease }}
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.config.outputs.version }}
          artifacts: >
            ${{ steps.vars.outputs.package_name }}.7z.*
          commit: ${{ github.sha }}

      - name: <Setup> Clean 7z archives to reduce disk usage
        run: rm -f ${{ steps.vars.outputs.package_name }}.7z.*

      # VVPP archives
      - name: <Build> Create VVPP archives
        run: |
          # Compress to compressed.zip.001, compressed.zip.002, ...
          # NOTE: 1000th archive will be "compressed.zip.1000" after "compressed.zip.999". This is unconsidered as an extreme case.
          (cd "${{ matrix.target }}" && 7z -r -v1900M a "../compressed.zip")

          # Rename to artifact.001.vvppp, artifact.002.vvppp, ...
          for FILE in compressed.zip.*; do
            NUMBER=${FILE##*.} # 001
            mv "${FILE}" "${{ steps.vars.outputs.package_name }}.${NUMBER}.vvppp"
          done

          # Rename to artifact.vvpp if there are only artifact.001.vvppp
          if [ "$(find ${{ steps.vars.outputs.package_name }}.*.vvppp -maxdepth 1 | wc -l)" -eq 1 ]; then
            mv ${{ steps.vars.outputs.package_name }}.001.vvppp ${{ steps.vars.outputs.package_name }}.vvpp
          fi

          # Output splitted archive list
          ls ${{ steps.vars.outputs.package_name }}*.vvppp ${{ steps.vars.outputs.package_name }}.vvpp > archives_vvpp.txt || true
          mv archives_vvpp.txt "${{ steps.vars.outputs.package_name }}.vvpp.txt"

      - name: <Deploy> Upload VVPP archives to artifact
        if: github.event.inputs.upload_artifact == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.vars.outputs.package_name }}-vvpp
          path: |
            ${{ steps.vars.outputs.package_name }}.vvpp
            ${{ steps.vars.outputs.package_name }}*.vvppp
            ${{ steps.vars.outputs.package_name }}.vvpp.txt

      - name: <Deploy> Upload VVPP archives to Release assets
        if: needs.config.outputs.version != ''
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          prerelease: ${{ github.event.inputs.prerelease }}
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.config.outputs.version }}
          artifacts: >
            ${{ steps.vars.outputs.package_name }}.vvpp,
            ${{ steps.vars.outputs.package_name }}*.vvppp,
            ${{ steps.vars.outputs.package_name }}.vvpp.txt
          commit: ${{ github.sha }}

      - name: <Deploy> Merge artifacts
        if: github.event.inputs.upload_artifact == 'true'
        uses: actions/upload-artifact/merge@v4
        with:
          name: ${{ steps.vars.outputs.package_name }}
          pattern: ${{ steps.vars.outputs.package_name }}-*
          delete-merged: true

  update-tag-to-current-commit:
    if: needs.config.outputs.version != ''
    needs: [config, build-and-upload]
    runs-on: ubuntu-latest
    steps:
      - name: <Setup> Check out the repository
        uses: actions/checkout@v4

      - name: <Deploy> Change tag to this commit for refreshing the release # ref: https://github.com/VOICEVOX/voicevox_engine/issues/854
        run: |
          git tag -f ${{ needs.config.outputs.version }}
          git push -f --tag

  run-release-test-workflow:
    if: needs.config.outputs.version != ''
    needs: [config, build-and-upload]
    uses: ./.github/workflows/test-engine-package.yml
    with:
      version: ${{ needs.config.outputs.version }}
      repo_url: ${{ format('{0}/{1}', github.server_url, github.repository) }} # このリポジトリのURL

  run-build-engine-container-workflow:
    if: needs.config.outputs.version != ''
    needs: [config, run-release-test-workflow]
    uses: ./.github/workflows/build-engine-container.yml
    with:
      version: ${{ needs.config.outputs.version }}
      # NOTE: workflow_dispatch以外では、 `inputs.push_dockerhub == null` であるため `push_dockerhub: false` となる
      push_dockerhub: ${{ inputs.push_dockerhub == true }}
    secrets:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
